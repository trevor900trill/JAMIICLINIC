"use client"
import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { aiAssistedDiagnosis, AiAssistedDiagnosisOutput } from '@/ai/flows/ai-assisted-diagnosis'
import { Lightbulb, Bot, Loader2, List } from 'lucide-react'

export default function AiDiagnosisPage() {
  const [symptoms, setSymptoms] = useState('')
  const [result, setResult] = useState<AiAssistedDiagnosisOutput | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!symptoms.trim()) {
      setError("Please enter patient symptoms.")
      return
    }
    setIsLoading(true)
    setError(null)
    setResult(null)
    try {
      const diagnosisResult = await aiAssistedDiagnosis({ symptoms })
      setResult(diagnosisResult)
    } catch (err) {
      setError("An error occurred while getting the diagnosis. Please try again.")
      console.error(err)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="grid gap-8 max-w-2xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Bot className="h-6 w-6" /> AI-Assisted Diagnosis</CardTitle>
          <CardDescription>
            Enter patient symptoms to get a list of potential diagnoses. This tool is for informational purposes only and does not replace a professional medical evaluation.
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent>
            <div className="grid w-full gap-2">
              <Label htmlFor="symptoms">Patient Symptoms</Label>
              <Textarea
                id="symptoms"
                placeholder="e.g., fever, cough, headache, fatigue for the last 3 days..."
                rows={6}
                value={symptoms}
                onChange={(e) => setSymptoms(e.target.value)}
                disabled={isLoading}
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" disabled={isLoading}>
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {isLoading ? 'Analyzing...' : 'Get Diagnosis'}
            </Button>
          </CardFooter>
        </form>
      </Card>

      {error && (
         <Alert variant="destructive">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
         </Alert>
      )}

      {result && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><List className="h-6 w-6" /> Potential Diagnoses</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 list-disc pl-5 text-foreground">
              {result.diagnoses.map((diagnosis, index) => (
                <li key={index} className="text-md">{diagnosis}</li>
              ))}
            </ul>
            <Alert className="mt-6 border-amber-500/50 text-amber-700 [&>svg]:text-amber-700">
              <Lightbulb className="h-4 w-4" />
              <AlertTitle className="font-semibold">Disclaimer</AlertTitle>
              <AlertDescription>
                The diagnoses provided are generated by an AI and should be considered as suggestions. A qualified medical professional must review and confirm any diagnosis.
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
